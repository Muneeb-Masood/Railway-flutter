// Mocks generated by Mockito 5.4.5 from annotations
// in flutter_railway_app/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/foundation.dart' as _i4;
import 'package:flutter/material.dart' as _i2;
import 'package:flutter_railway_app/screens/login/login_model.dart' as _i3;
import 'package:flutter_railway_app/screens/login/login_model_impl.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTextEditingController_0 extends _i1.SmartFake
    implements _i2.TextEditingController {
  _FakeTextEditingController_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLoginModel_1 extends _i1.SmartFake implements _i3.LoginModel {
  _FakeLoginModel_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWidget_2 extends _i1.SmartFake implements _i2.Widget {
  _FakeWidget_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_3 extends _i1.SmartFake
    implements _i2.InheritedWidget {
  _FakeInheritedWidget_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_4 extends _i1.SmartFake
    implements _i2.DiagnosticsNode {
  _FakeDiagnosticsNode_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({
    _i4.TextTreeConfiguration? parentConfiguration,
    _i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info,
  }) => super.toString();
}

/// A class which mocks [LoginModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginModel extends _i1.Mock implements _i3.LoginModel {
  MockLoginModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TextEditingController get emailController =>
      (super.noSuchMethod(
            Invocation.getter(#emailController),
            returnValue: _FakeTextEditingController_0(
              this,
              Invocation.getter(#emailController),
            ),
          )
          as _i2.TextEditingController);

  @override
  set emailController(_i2.TextEditingController? _emailController) =>
      super.noSuchMethod(
        Invocation.setter(#emailController, _emailController),
        returnValueForMissingStub: null,
      );

  @override
  _i2.TextEditingController get passwordController =>
      (super.noSuchMethod(
            Invocation.getter(#passwordController),
            returnValue: _FakeTextEditingController_0(
              this,
              Invocation.getter(#passwordController),
            ),
          )
          as _i2.TextEditingController);

  @override
  set passwordController(_i2.TextEditingController? _passwordController) =>
      super.noSuchMethod(
        Invocation.setter(#passwordController, _passwordController),
        returnValueForMissingStub: null,
      );

  @override
  String get loginButtonText =>
      (super.noSuchMethod(
            Invocation.getter(#loginButtonText),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#loginButtonText),
            ),
          )
          as String);

  @override
  set loginButtonText(String? _loginButtonText) => super.noSuchMethod(
    Invocation.setter(#loginButtonText, _loginButtonText),
    returnValueForMissingStub: null,
  );

  @override
  String get facebookButtonText =>
      (super.noSuchMethod(
            Invocation.getter(#facebookButtonText),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#facebookButtonText),
            ),
          )
          as String);

  @override
  set facebookButtonText(String? _facebookButtonText) => super.noSuchMethod(
    Invocation.setter(#facebookButtonText, _facebookButtonText),
    returnValueForMissingStub: null,
  );

  @override
  String get googleButtonText =>
      (super.noSuchMethod(
            Invocation.getter(#googleButtonText),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#googleButtonText),
            ),
          )
          as String);

  @override
  set googleButtonText(String? _googleButtonText) => super.noSuchMethod(
    Invocation.setter(#googleButtonText, _googleButtonText),
    returnValueForMissingStub: null,
  );

  @override
  String get googleImage =>
      (super.noSuchMethod(
            Invocation.getter(#googleImage),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#googleImage),
            ),
          )
          as String);

  @override
  set googleImage(String? _googleImage) => super.noSuchMethod(
    Invocation.setter(#googleImage, _googleImage),
    returnValueForMissingStub: null,
  );

  @override
  String get facebookImage =>
      (super.noSuchMethod(
            Invocation.getter(#facebookImage),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#facebookImage),
            ),
          )
          as String);

  @override
  set facebookImage(String? _facebookImage) => super.noSuchMethod(
    Invocation.setter(#facebookImage, _facebookImage),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [LoginModelImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginModelImpl extends _i1.Mock implements _i6.LoginModelImpl {
  MockLoginModelImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.LoginModel get model =>
      (super.noSuchMethod(
            Invocation.getter(#model),
            returnValue: _FakeLoginModel_1(this, Invocation.getter(#model)),
          )
          as _i3.LoginModel);

  @override
  void onPressed(_i2.BuildContext? context) => super.noSuchMethod(
    Invocation.method(#onPressed, [context]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i2.BuildContext {
  MockBuildContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Widget get widget =>
      (super.noSuchMethod(
            Invocation.getter(#widget),
            returnValue: _FakeWidget_2(this, Invocation.getter(#widget)),
          )
          as _i2.Widget);

  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);

  @override
  bool get debugDoingBuild =>
      (super.noSuchMethod(
            Invocation.getter(#debugDoingBuild),
            returnValue: false,
          )
          as bool);

  @override
  _i2.InheritedWidget dependOnInheritedElement(
    _i2.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #dependOnInheritedElement,
              [ancestor],
              {#aspect: aspect},
            ),
            returnValue: _FakeInheritedWidget_3(
              this,
              Invocation.method(
                #dependOnInheritedElement,
                [ancestor],
                {#aspect: aspect},
              ),
            ),
          )
          as _i2.InheritedWidget);

  @override
  void visitAncestorElements(_i2.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(#visitAncestorElements, [visitor]),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildElements(_i2.ElementVisitor? visitor) => super.noSuchMethod(
    Invocation.method(#visitChildElements, [visitor]),
    returnValueForMissingStub: null,
  );

  @override
  void dispatchNotification(_i2.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(#dispatchNotification, [notification]),
        returnValueForMissingStub: null,
      );

  @override
  _i2.DiagnosticsNode describeElement(
    String? name, {
    _i4.DiagnosticsTreeStyle? style = _i4.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#describeElement, [name], {#style: style}),
            returnValue: _FakeDiagnosticsNode_4(
              this,
              Invocation.method(#describeElement, [name], {#style: style}),
            ),
          )
          as _i2.DiagnosticsNode);

  @override
  _i2.DiagnosticsNode describeWidget(
    String? name, {
    _i4.DiagnosticsTreeStyle? style = _i4.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#describeWidget, [name], {#style: style}),
            returnValue: _FakeDiagnosticsNode_4(
              this,
              Invocation.method(#describeWidget, [name], {#style: style}),
            ),
          )
          as _i2.DiagnosticsNode);

  @override
  List<_i2.DiagnosticsNode> describeMissingAncestor({
    required Type? expectedAncestorType,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#describeMissingAncestor, [], {
              #expectedAncestorType: expectedAncestorType,
            }),
            returnValue: <_i2.DiagnosticsNode>[],
          )
          as List<_i2.DiagnosticsNode>);

  @override
  _i2.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#describeOwnershipChain, [name]),
            returnValue: _FakeDiagnosticsNode_4(
              this,
              Invocation.method(#describeOwnershipChain, [name]),
            ),
          )
          as _i2.DiagnosticsNode);
}
